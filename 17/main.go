package main

import (
	"errors"
	"fmt"
)

/*Задание:
Реализовать бинарный поиск встроенными методами языка.
*/

func main() {
	// создаем слайс для поиска
	data := []int{0, 1, 2, 4, 6, 7, 9, 9, 12, 13, 15, 16, 17, 25, 25, 26}
	// вызываем функцию возвращающую индекс искомого числа (либо ошибку)
	idx, err := BinSearch(data, 9)
	// если возникла ошибка выводим ее
	if err != nil {
		fmt.Println(err)
		return
	}
	// если ошибки нет, то выводим индекс числа
	fmt.Println("индекс числа:", idx)
}

func BinSearch(data []int, val int) (int, error) {
	// проверка на пустой входной слайс
	if len(data) < 1 {
		err := errors.New("массив пуст")
		return 0, err
	}

	//обозначаем крайние точки отрезка поиска
	low := 0
	high := len(data) - 1

	// обходим слайс
	for {
		// вычисляем индекс середины отрезка
		i := low + (high-low)/2
		// если в найденном индексе хранится искомое значение, возвращаем индекс
		if data[i] == val {
			return i, nil
		}
		// если отрезок поиска имеет нулевую длину (один элемент),
		//то выводим ошибку об отсутствии искомого значения
		if high-low == 0 {
			err := errors.New("значение не найдено")
			return 0, err
		}
		// если хранимое значение меньше искомого, то сдвигаем левую границу отрезка поиска
		if data[i] < val {
			low = i + 1
			continue
		}
		// если хранимое значение больше искомого, то сдвигаем правую границу отрезка поиска
		if data[i] > val {
			high = i - 1
		}
	}
}
