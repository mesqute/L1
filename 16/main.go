package main

import "fmt"

/*Задание:
Реализовать быструю сортировку массива (quicksort) встроенными методами языка.
*/

func main() {
	// создаем слайс
	data := []int{0, 5, 7, 13, 8, 46, 4, 7, 8, 12, 35, 48, 79, 45}
	fmt.Println(data)

	// сортируем слайс
	QSort(data, 0, len(data)-1)
	fmt.Println(data)

}

func QSort(data []int, low, high int) {
	// если расстояние сортируемого отрезка меньше 2, то сортировать его нет смысла
	if low < high {
		var p int

		// применяем разбиение Хоара

		// выбираем опорный элемент как средний в массиве
		// (в меньшую строну если в массиве четное кол-во элементов)
		ref := data[low+(high-low)/2]
		// первый индекс указываем как начало отрезка сортировки
		i := low
		// второй индекс указываем как конец отрезка сортировки
		j := high
		// цикл перебора элементов
		for {
			// движемся слева и ищем элемент больший либо равный опорному
			for data[i] < ref {
				i++
			}
			// движемся справа и ищем элемент меньший либо равный опорному
			for data[j] > ref {
				j--
			}
			// если индексы встретились, выходим из цикла перебора элементов
			if i >= j {
				p = j
				break
			}
			// если не встретились, меняем местами данные и сдвигаем индексы на один шаг
			data[i], data[j] = data[j], data[i]
			i++
			j--
		}

		// рекурсивно вызываем функцию для
		QSort(data, low, p)
		QSort(data, p+1, high)
	}

}
