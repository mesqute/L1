package main

import (
	"fmt"
	"math/rand"
)

/*Задание:
Дана переменная int64. Разработать программу, которая устанавливает i-й бит в 1 или 0
*/

func main() {
	var val int64
	// рандомизируем переменную
	val = rand.Int63()
	// выводим ее значение
	fmt.Println("переменная:", val)
	for {
		var i, v int
		var res int64
		// считываем номер изменяемого бита из консоли
		fmt.Println("Введите номер изменяемого бита (от 0 до 63): ")

		if _, err := fmt.Scan(&i); err != nil {
			fmt.Println(err)
			return
		}
		// проверяем вводимые данные на корректность
		if i < 0 || i > 63 {
			fmt.Println("Неверное значение i!")
			continue
		}
		// считываем номер изменяемого бита из консоли
		fmt.Println("Введите значение изменяемого бита (0 или 1): ")
		_, err := fmt.Scan(&v)
		if err != nil {
			fmt.Println(err)
			return
		}
		// проверяем вводимые данные на корректность
		if v != 0 && v != 1 {
			fmt.Println("Неверное значение бита!")
			continue
		}

		// вызываем функцию
		res = BitwiseOpr(i, v, val)
		// выводим полученный результат
		fmt.Println("Полученное число:", res)
	}
}

func BitwiseOpr(i, v int, val int64) int64 {
	// создаем переменную, содержащую лишь один бит в указанной позиции
	var mask int64 = 1 << i
	// в зависимости от целевого значения выбираем подход

	// если целевое значение равно 0, то применяем сброс бита (И НЕ)
	if v == 0 {
		val = val &^ mask // если бит mask равен 1, то результирующий бит равен 0, иначе копирует биты из val
		return val
	}
	// если целевое равно 1, то применяем поразрядное сложение (ИЛИ)
	val = val | mask // если хотя-бы один из соотв разрядов равен 1, то возвращает 1

	return val
}
